Factory.php: * $this->factory->get('Node', array(...));
Factory.php: * $this->factory->get('NodeType\PropertyDefinition', array(...));
Node.php:                            $this->properties[$key] = $this->factory->get(
Node.php:                        $this->properties[$key] = $this->factory->get(
Node.php:                        $this->properties[$key] = $this->factory->get(
Node.php:                        $this->properties[$key] = $this->factory->get(
Node.php:        $node = $this->factory->get('Node', array($data, $path, $this->session, $this->objectManager, true));
Node.php:            $property = $this->factory->get('Property', array(array(), $path, $this->session, $this->objectManager, true));
Node.php:            $property = $this->factory->get(
NodeType/NodeTypeManager.php:            $nodetype = $this->factory->get('NodeType\NodeType', array($this, $nodetype));
NodeType/NodeTypeManager.php:       return $this->factory->get('NodeType\NodeTypeTemplate', array($this, $ntd));
NodeType/NodeTypeManager.php:       return $this->factory->get('NodeType\NodeDefinitionTemplate', array($this));
NodeType/NodeTypeManager.php:       return $this->factory->get('NodeType\PropertyDefinitionTemplate', array($this));
NodeType/NodeTypeManager.php:        return $this->factory->get('NodeType\NodeType', array($this, $ntd));
NodeType/NodeTypeDefinition.php:            $this->declaredPropertyDefinitions[] = $this->factory->get(
NodeType/NodeTypeDefinition.php:            $this->declaredNodeDefinitions[] = $this->factory->get(
NodeType/NodeTypeDefinition.php:            $this->declaredPropertyDefinitions[] = $this->factory->get(
NodeType/NodeTypeDefinition.php:            $this->declaredNodeDefinitions[] = $this->factory->get(
ObjectManager.php:        $node = $this->factory->get(
ObjectManager.php:                $nodes[$absPath] = $this->factory->get(
Query/SqlQuery.php:        $queryResult = $this->factory->get(
Query/RowIterator.php:        return $this->factory->get('Query\Row', array($this->objectmanager, $this->rows[$this->position]));
Query/QueryManager.php:                return $this->factory->get('Query\SqlQuery', array($statement, $this->objectmanager));
Query/QueryResult.php:        return $this->factory->get('Query\RowIterator', array($this->objectmanager, $this->rows));
Query/QueryResult.php:            return $this->factory->get('Query\NodeIterator', array($this->objectmanager, $this->rows));
RepositoryFactoryDoctrineDBAL.php:        $transport = $factory->get('Jackalope\Transport\DoctrineDBAL\Client', array($dbConn));
RepositoryFactoryJackrabbit.php:        $transport = $factory->get('Transport\Jackrabbit\Client', array($uri));
Repository.php:        $session = $this->factory->get('Session', array($this, $workspaceName, $credentials, $this->transport));
Repository.php:            $utx = $this->factory->get('Transaction\\UserTransaction', array($this->transport, $session));
Session.php:        $this->objectManager = $this->factory->get('ObjectManager', array($transport, $this));
Session.php:        $this->workspace = $this->factory->get('Workspace', array($this, $this->objectManager, $workspaceName));
Transport/Jackrabbit/Client.php:        $request = $this->factory->get('Transport\Jackrabbit\Request', array($this->curl, $method, $uri));
Version/VersionManager.php:        return $this->factory->get('Version\VersionHistory', array($this->objectmanager,$absPath));
Workspace.php:        $this->nodeTypeManager = $this->factory->get('NodeType\NodeTypeManager', array($objectManager));
Workspace.php:        return $this->factory->get('Query\QueryManager', array($this->session->getObjectManager()));
Workspace.php:            $this->namespaceRegistry = $this->factory->get('NamespaceRegistry', array($this->session->getTransport()));
Workspace.php:        return $this->factory->get('Version\VersionManager', array($this->session->getObjectManager()));
